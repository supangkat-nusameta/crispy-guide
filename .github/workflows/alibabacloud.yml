# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy to ACK

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: ap-southeast-5
  # REGISTRY: gamebox-002-registry.ap-southeast-5.cr.aliyuncs.com
  # NAMESPACE: eka
  # IMAGE: cms2
  TAG: v3
  ACK_CLUSTER_ID: cff769c615b1c4bacb6defbb95a92e931
  ACK_DEPLOYMENT_NAME: eka-deployment
 
  ACR_EE_REGISTRY: gamebox-002-registry.ap-southeast-5.cr.aliyuncs.com
  ACR_EE_INSTANCE_ID: cri-96ndj4isyv76pwum
  ACR_EE_NAMESPACE: eka
  ACR_EE_IMAGE: cms2
  ACR_EE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    steps:
    - uses: actions/checkout@v3
      name: Use Node.js
    - uses: actions/setup-node@v3
      with:
        node-version: '18.x'
      name: Install dependencies
    - run: yarn
      name: Run crispy test
    - run: yarn test

    # 1.1 Login to ACR
    - name: Alibaba Cloud Container Registry (ACR) Login
    # You may pin to the exact commit or the version.
    # uses: aliyun/acr-login@b55d70f7dbd5f5a5bcdbdd3f12e10452e98cc63b
      uses: aliyun/acr-login@v1.0.5
      with:
    # Container registry username
       username: "${{ secrets.USERNAME }}"
    # Container registry password
       password: "${{ secrets.PASSWORD }}" 
    # Access key id
       access-key-id: "${{ secrets.ACCESS_KEY_ID }}" 
    # Access key secret
       access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}" 
    # STS token
      #  security-token: # optional, default is 
    # Region id
       region-id: "${{ env.REGION_ID }}"
    # Registry instance id
       instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"
    # Container registry server url
       login-server: "${{ env.ACR_EE_REGISTRY }}"


    # - name: Login to ACR with the AccessKey pair
    #   uses: aliyun/acr-login@v1
    #   with:
    #     region-id: "${{ env.REGION_ID }}"
    #     access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
    #     access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"

    # 1.2 Buid and push image to ACR
    # - name: Build and push image to ACR
    #   run: |
    #     docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
    #     docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    # # 1.3 Scan image in ACR
    # - name: Scan image in ACR
    #   uses: aliyun/acr-scan@v1
    #   with:
    #     region-id: "${{ env.REGION_ID }}"
    #     access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
    #     access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
    #     repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
    #     tag: "${{ env.TAG }}"

    # 2.1 (Optional) Login to ACR EE
    - uses: actions/checkout@v3
    - name: Login to ACR EE with the AccessKey pair
      uses: aliyun/acr-login@v1
      with:
        login-server: "https://${{ env.ACR_EE_REGISTRY }}"
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"

    # 2.2 (Optional) Build and push image ACR EE
    - name: Build and push image to ACR EE
      run: |
        docker build -t "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$TAG" .
        docker push "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$TAG"
    # 2.3 (Optional) Scan image in ACR EE
    - name: Scan image in ACR EE
      uses: aliyun/acr-scan@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"
        repository: "${{ env.ACR_EE_NAMESPACE}}/${{ env.ACR_EE_IMAGE }}"
        tag: "${{ env.ACR_EE_TAG }}"

    # 3.1 Set ACK context
    - name: Set K8s context
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ env.ACK_CLUSTER_ID }}"

    # 3.2 Deploy the image to the ACK cluster
    - name: Set up Kustomize
      run: |-
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash /dev/stdin 3.8.6
    - name: Deploy
      run: |-
        ./kustomize edit set image REGISTRY/NAMESPACE/IMAGE:TAG=$REGISTRY/$NAMESPACE/$IMAGE:$TAG
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$ACK_DEPLOYMENT_NAME
        kubectl get services -o wide
